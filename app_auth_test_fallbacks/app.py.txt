import streamlit as st
import sqlite3
from PIL import Image
import requests
from urllib.request import urlopen
import io
from streamlit_card import card as st_card
from oauthlib.oauth2 import WebApplicationClient
import os
import json

# Constants and API keys
apikey = str(os.environ.get("API_KEY"))
google_client_id = os.environ.get("GOOGLE_CLIENT_ID")
google_client_secret = os.environ.get("GOOGLE_CLIENT_SECRET")
google_discovery_url = "https://accounts.google.com/.well-known/openid-configuration"

category = ['--Select--', 'Trendingüî• News', 'Favouriteüíô Topics', 'Searchüîç Topic']

# Function to create a Google OAuth2 client
def create_google_oauth_client():
    client = WebApplicationClient(google_client_id)
    return client

def get_google_provider_cfg():
    return requests.get(google_discovery_url).json()

def add_notes():
    st.sidebar.subheader("Notes")
    user_notes = st.sidebar.text_area("Make Notes Here:")
    if st.sidebar.button("Save Notes"):
        save_notes(user_notes)

def add_interesting_facts():
    st.sidebar.subheader("Interesting Facts üí°")
    facts = [
        "Did you know? The first email was sent by Ray Tomlinson in 1971.",
        "The average person spends around 6 years of their life dreaming.",
        "Honey never spoils. Archaeologists have found pots of honey in ancient Egyptian tombs that are over 3,000 years old and still perfectly edible."
    ]
    for fact in facts:
        st.sidebar.markdown("- " + fact)
    st.sidebar.markdown("[See more interesting facts](https://www.rd.com/list/interesting-facts/)")

def save_notes(notes):
    st.sidebar.write("Notes saved successfully!")

# Country language codes for NewsAPI
countries = {
    'Saudi Arabia': 'ar',
    'Germany': 'de',
    'United States': 'us',
    'Spain': 'es',
    'France': 'fr',
    'India': 'in',
    'Italy': 'it',
    'Netherlands': 'nl',
    'Norway': 'no',
    'Portugal': 'pt',
    'Russia': 'ru',
    'Sweden': 'se',
    'Unknown Country': 'ud',
    'China': 'cn'
}

# Database initialization and optimization
def initialize_database():
    conn = sqlite3.connect('news_articles.db')
    c = conn.cursor()
    # Create articles table with UNIQUE constraint on (email, title)
    c.execute('''CREATE TABLE IF NOT EXISTS articles (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 email TEXT NOT NULL,
                 title TEXT NOT NULL,
                 author TEXT,
                 publishedAt TEXT,
                 source TEXT,
                 description TEXT,
                 content TEXT,
                 imageUrl TEXT,
                 url TEXT,
                 UNIQUE(email, title)
                 )''')
    conn.commit()
    conn.close()

# Function to insert email into the database
def insert_email(email):
    conn = sqlite3.connect('news_articles.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO articles (email) VALUES (?)", (email,))
    conn.commit()
    conn.close()

# Function to save article to the database
def save_article_to_database(article, email):
    conn = sqlite3.connect('news_articles.db')
    c = conn.cursor()
    
    try:
        # Insert or replace the article for the user
        c.execute('''INSERT OR REPLACE INTO articles
                     (email, title, author, publishedAt, source, description, content, imageUrl, url)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                  (email, article.get('title'), article.get('author'), article.get('publishedAt'),
                   article['source']['name'], article.get('description'), article.get('content', ''),
                   article.get('urlToImage', ''), article.get('url', '')))
        st.success(f"Article '{article['title']}' saved/updated successfully for user '{email}'")
    except sqlite3.Error as e:
        st.error(f"Database error: {e}")
    finally:
        conn.commit()
        conn.close()

# Display saved articles
def display_saved_articles_as_cards(title, text, image_url, url, key=None):
    st_card(
        title=title,
        text=text,
        image=image_url,
        url=url,
        key=key
    )

def display_saved_articles(email):
    conn = sqlite3.connect('news_articles.db')
    c = conn.cursor()
    c.execute("SELECT * FROM articles WHERE email=?", (email,))
    saved_articles = c.fetchall()
    conn.close()

    if not saved_articles:
        st.warning("No saved articles found for this email.")
        return

    st.subheader("Saved Articles:")
    for i, article in enumerate(saved_articles):
        card_key = f"saved_article_{i}"
        display_saved_articles_as_cards(article[2], article[6], article[8], article[9], key=card_key)

# Fetch news via NewsAPI
def fetch_news_search_topic(topic, country):
    language_code = countries[country]
    site = f"https://newsapi.org/v2/everything?q={topic}&language={language_code}&apiKey={apikey}"
    return site

def fetch_top_news(country):
    language_code = countries[country]
    site = f"https://newsapi.org/v2/top-headlines?country={language_code}&apiKey={apikey}"
    return site

def fetch_category_news(topic, country):
    language_code = countries[country]
    site = f"https://newsapi.org/v2/top-headlines?category={topic}&country={language_code}&apiKey={apikey}"
    return site

# Fetch news posters
def fetch_news_poster(poster_link):
    try:
        u = urlopen(poster_link)
        raw_data = u.read()
        image = Image.open(io.BytesIO(raw_data))
        st.image(image, use_column_width=True)
    except:
        image = Image.open('./Meta/no_image.jpg')
        st.image(image, use_column_width=True)

# Fallback mechanism (web scraping)
def fallback_news_fetch(topic):
    # Implement basic web scraping logic as fallback if NewsAPI fails
    st.warning("NewsAPI limit reached. Switching to fallback method.")
    # This is just a placeholder; actual scraping would require BeautifulSoup or similar.

# Improved error handling
def display_news(url, country, email):
    try:
        r = requests.get(url)
        if r.status_code != 200:
            st.error(f"Failed to fetch news. Status code: {r.status_code}")
            fallback_news_fetch(country)  # Call fallback if API fails
            return
        
        news_data = r.json()
        articles = news_data.get('articles', [])
        if not articles:
            st.warning("No articles found.")
            return

        for i, article in enumerate(articles):
            st.header(article['title'])
            st.write(article['publishedAt'])
            if article['author']:
                st.write("Author:", article['author'])
            st.write("Source:", article['source']['name'])
            st.write("Description:", article['description'])
            try:
                image_url = article.get('urlToImage')
                if image_url:
                    image_data = requests.get(image_url).content
                    image = Image.open(io.BytesIO(image_data))
                    st.image(image, caption='Image', use_column_width=True)
            except Exception as e:
                st.error("Error loading image: " + str(e))
                st.image(Image.open('./Meta/no_image.jpg'), use_column_width=True)

            # Add button to display full content
            button_key = f"article_{i}_button"
            if st.button("Read Full Article", key=button_key):
                content = article.get('content')
                if content:
                    st.write("Content:")
                    st.write(content)
                st.markdown(f"[Read more at {article['source']['name']}...]({article['url']})")
            
            save_button_key = f"save_article_{i}_
            if st.button(f"Save Article {i + 1}", key=save_button_key):
                save_article_to_database(article, email)

    except requests.exceptions.RequestException as e:
        st.error(f"Failed to connect to NewsAPI: {e}")
        fallback_news_fetch(country)

# Main app logic
def main():
    initialize_database()

    # Google OAuth Authentication
    st.title("News Hub Connect - Personalized News Experience")
    
    google_client = create_google_oauth_client()
    google_cfg = get_google_provider_cfg()
    authorization_endpoint = google_cfg["authorization_endpoint"]

    # Create a login button
    if st.button("Login with Google"):
        request_uri = google_client.prepare_request_uri(
            authorization_endpoint,
            redirect_uri="http://localhost:8501/callback",  # Change to your callback URL
            scope=["openid", "email", "profile"]
        )
        st.write(f"[Click here to login with Google]({request_uri})")
    
    # Simulate user authentication for demo (replace with real OAuth handling)
    email = st.text_input('Enter Email Address to save articles')

    if email:
        insert_email(email)  # Insert email into the database

    # Add notes and interesting facts
    add_notes()
    add_interesting_facts()

    # Country and category selection
    Countname = st.selectbox('Select your Country', list(countries.keys()))
    cat_op = st.selectbox('Select your Category', category)

    # Fetch news based on category selection
    if cat_op == 'Searchüîç Topic':
        topic = st.text_input("Enter Topic:")
        if st.button("Search"):
            if topic:
                url = fetch_news_search_topic(topic, Countname)
                display_news(url, Countname, email)
            else:
                st.warning("Please enter a search term.")

    elif cat_op == 'Trendingüî• News':
        if st.button("Fetch Trending News"):
            url = fetch_top_news(Countname)
            display_news(url, Countname, email)

    elif cat_op == 'Favouriteüíô Topics':
        display_saved_articles(email)

if __name__ == "__main__":
    main()
